{"version":3,"sources":["App.js","index.js"],"names":["Ball","args","viewport","useThree","useSphere","mass","ref","api","usePlane","position","height","rotation","Math","PI","onCollide","set","velocity","color","Paddle","useBox","useFrame","state","mouse","x","width","Enemy","props","App","camera","fov","intensity","gravity","defaultContactMaterial","restitution","render","document","getElementById"],"mappings":"qRAIA,SAASA,GAAK,KAAEC,EAAO,CAAC,GAAK,GAAI,MAAQ,MAC/BC,EAAaC,cAAbD,SAD8B,EAEnBE,YAAU,MAASH,KAAM,GAAKI,KAAM,KAFjB,mBAE/BC,EAF+B,KAE1BC,EAF0B,KAatC,OATAC,YAAS,MACPC,SAAU,CAAC,GAAIP,EAASQ,OAAQ,GAChCC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAC5BC,UAAW,KACTP,EAAIE,SAASM,IAAI,EAAE,EAAE,GACrBR,EAAIS,SAASD,IAAI,EAAE,GAAG,OAKxB,0BAAMT,IAAKA,GACT,0CAAsBL,KAAMA,IAC5B,0CAAsBgB,MAAM,WAKlC,SAASC,GAAO,KAAEjB,EAAO,CAAC,EAAG,GAAK,KAAO,MAAD,EACnBkB,YAAO,MAASlB,UADG,mBAC/BK,EAD+B,KAC1BC,EAD0B,KAMtC,OAJAa,YAAUC,IACRd,EAAIE,SAASM,IAAKM,EAAMC,MAAMC,EAAIF,EAAMnB,SAASsB,MAAS,GAAIH,EAAMnB,SAASQ,OAAS,EAAG,GACzFH,EAAII,SAASI,IAAI,EAAE,EAAEM,EAAMC,MAAMC,EAAIX,KAAKC,GAAK,KAG/C,0BAAMP,IAAKA,GACT,uCAAmBL,KAAMA,IACzB,0CAAsBgB,MAAM,eAKlC,SAASQ,EAAT,GAAyD,IAAD,IAAvCxB,YAAuC,MAAhC,CAAC,EAAG,GAAK,GAAuB,EAAnBgB,EAAmB,EAAnBA,MAAUS,EAAS,wCACnCP,YAAO,iBAASlB,QAASyB,IADU,mBAC/CpB,EAD+C,UAEtD,OACE,0BAAMA,IAAKA,GACT,uCAAmBL,KAAMA,IACzB,0CAAsBgB,MAAOA,KAKpB,SAASU,IACtB,OACE,kBAAC,IAAD,CAAQC,OAAQ,CAAEnB,SAAU,CAAC,EAAG,EAAG,IAAKoB,IAAK,KAC3C,kCAAcC,UAAW,KACzB,gCAAYrB,SAAU,CAAC,GAAI,GAAI,KAC/B,gCAAYA,SAAU,EAAE,IAAK,IAAK,KAClC,kBAAC,IAAD,CAASsB,QAAS,CAAC,GAAI,GAAI,GAAIC,uBAAwB,CAAEC,YAAa,MACpE,kBAACjC,EAAD,MACA,kBAACkB,EAAD,MACA,kBAACO,EAAD,CAAOR,MAAM,SAASR,SAAU,CAAC,EAAE,EAAE,KACrC,kBAACgB,EAAD,CAAOR,MAAM,UAAUR,SAAU,EAAE,EAAE,EAAE,O,MCtD/CyB,iBAAO,kBAACP,EAAD,MAASQ,SAASC,eAAe,W","file":"static/js/main.8ca8fca7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport { Physics, useSphere, useBox, usePlane } from 'use-cannon'\n\nfunction Ball({ args = [0.5, 32, 32] }) {\n  const { viewport } = useThree()\n  const [ref, api] = useSphere(() => ({ args: 0.5, mass: 1 }))\n\n  usePlane(() => ({\n    position: [0, -viewport.height, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    onCollide: () => {\n      api.position.set(0,0,0)\n      api.velocity.set(0,10,0)\n    }\n  }))\n\n  return (\n    <mesh ref={ref}>\n      <sphereBufferGeometry args={args} />\n      <meshStandardMaterial color=\"white\" />\n    </mesh>\n  )\n}\n\nfunction Paddle({ args = [2, 0.5, 1] }) {\n  const [ref, api] = useBox(() => ({ args }))\n  useFrame((state) => {\n    api.position.set((state.mouse.x * state.viewport.width) / 2, -state.viewport.height / 2, 0)\n    api.rotation.set(0,0,state.mouse.x * Math.PI / 5)\n  })\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry args={args} />\n      <meshStandardMaterial color=\"lightblue\" />\n    </mesh>\n  )\n}\n\nfunction Enemy({ args = [2, 0.5, 1], color, ...props }) {\n  const [ref, api] = useBox(() => ({ args, ...props }))\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry args={args} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas camera={{ position: [0, 5, 12], fov: 50 }}>\n      <ambientLight intensity={0.3} />\n      <pointLight position={[10, 10, 5]} />\n      <pointLight position={[-10, -10, -5]} />\n      <Physics gravity={[0, -30, 0]} defaultContactMaterial={{ restitution: 1.1 }}>\n        <Ball />\n        <Paddle />\n        <Enemy color=\"orange\" position={[2,1,0]} />\n        <Enemy color=\"hotpink\" position={[-2,3,0]} />\n      </Physics>\n    </Canvas>\n  )\n}\n","import { render } from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport \"./styles.css\"\n\nrender(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}